// -----------------------------------------------------------------------------
// Autogenerated code. Do not modify.
// -----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;

namespace Basic.Azure.Storage.Communications.ServiceExceptions
{

/// <summary>
/// Maps a WebException from Azure to the appropriate local exception type
/// </summary>
/// <remarks>
/// Uses the Table Service Error Codes defined here: http://msdn.microsoft.com/en-us/library/windowsazure/dd179438.aspx
/// </remarks>
public static class TableServiceAzureExceptions
{

	public static AzureException GetExceptionFor(string requestId, HttpStatusCode statusCode, string errorCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
	{
		switch(errorCode)
		{
		 
			case "DuplicatePropertiesSpecified":
				return new DuplicatePropertiesSpecifiedAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "EntityAlreadyExists":
				return new EntityAlreadyExistsAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "EntityTooLarge":
				return new EntityTooLargeAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "HostInformationNotPresent":
				return new HostInformationNotPresentAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "InvalidValueType":
				return new InvalidValueTypeAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "JsonFormatNotSupported":
				return new JsonFormatNotSupportedAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "MethodNotAllowed":
				return new MethodNotAllowedAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "NotImplemented":
				return new NotImplementedAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "PropertiesNeedValue":
				return new PropertiesNeedValueAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "PropertyNameInvalid":
				return new PropertyNameInvalidAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "PropertyNameTooLong":
				return new PropertyNameTooLongAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "PropertyValueTooLarge":
				return new PropertyValueTooLargeAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "TableAlreadyExists":
				return new TableAlreadyExistsAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "TableBeingDeleted":
				return new TableBeingDeletedAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "TableNotFound":
				return new TableNotFoundAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "TooManyProperties":
				return new TooManyPropertiesAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "XMethodIncorrectCount":
				return new XMethodIncorrectCountAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "XMethodIncorrectValue":
				return new XMethodIncorrectValueAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "XMethodNotUsingPost":
				return new XMethodNotUsingPostAzureException(requestId, statusCode, statusDescription, details, baseException);
			 
			case "UpdateConditionNotSatisfied":
				return new UpdateConditionNotSatisfiedAzureException(requestId, statusCode, statusDescription, details, baseException);
					}

		var shortStatusDescription = statusDescription.Split('\n')[0];
		switch(shortStatusDescription)
		{
			 
				case "A property is specified more than one time.":
					return new DuplicatePropertiesSpecifiedAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The specified entity already exists.":
					return new EntityAlreadyExistsAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The entity is larger than the maximum size permitted.":
					return new EntityTooLargeAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The required host information is not present in the request. You must send a non-empty Host header or include the absolute URI in the request line.":
					return new HostInformationNotPresentAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The value specified is invalid.":
					return new InvalidValueTypeAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "JSON format is not supported.":
					return new JsonFormatNotSupportedAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The requested method is not allowed on the specified resource.":
					return new MethodNotAllowedAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The requested operation is not implemented on the specified resource.":
					return new NotImplementedAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "Values have not been specified for all properties in the entity.":
					return new PropertiesNeedValueAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The property name is invalid.":
					return new PropertyNameInvalidAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The property name exceeds the maximum allowed length.":
					return new PropertyNameTooLongAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The property value is larger than the maximum size permitted.":
					return new PropertyValueTooLargeAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The table specified already exists.":
					return new TableAlreadyExistsAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The specified table is being deleted.":
					return new TableBeingDeletedAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The table specified does not exist.":
					return new TableNotFoundAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The entity contains more properties than allowed.":
					return new TooManyPropertiesAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "More than one X-HTTP-Method is specified.":
					return new XMethodIncorrectCountAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The specified X-HTTP-Method is invalid.":
					return new XMethodIncorrectValueAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The request uses X-HTTP-Method with an HTTP verb other than POST.":
					return new XMethodNotUsingPostAzureException(requestId, statusCode, statusDescription, details, baseException);
				 
				case "The condition specified using HTTP conditional header(s) is not met.":
					return new UpdateConditionNotSatisfiedAzureException(requestId, statusCode, statusDescription, details, baseException);
				
			default:
				return CommonServiceAzureExceptions.GetExceptionFor(requestId, statusCode, errorCode, statusDescription, details, baseException);
		}
	}

}

	///
	///<summary>
	///Represents a 'DuplicatePropertiesSpecified' error response from the Table Service API 
	///</summary>
	///<remarks>Description: A property is specified more than one time.</remarks>
	public class DuplicatePropertiesSpecifiedAzureException : AzureException
    {
        public DuplicatePropertiesSpecifiedAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'EntityAlreadyExists' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The specified entity already exists.</remarks>
	public class EntityAlreadyExistsAzureException : AzureException
    {
        public EntityAlreadyExistsAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'EntityTooLarge' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The entity is larger than the maximum size permitted.</remarks>
	public class EntityTooLargeAzureException : AzureException
    {
        public EntityTooLargeAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'HostInformationNotPresent' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The required host information is not present in the request. You must send a non-empty Host header or include the absolute URI in the request line.</remarks>
	public class HostInformationNotPresentAzureException : AzureException
    {
        public HostInformationNotPresentAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'InvalidValueType' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The value specified is invalid.</remarks>
	public class InvalidValueTypeAzureException : AzureException
    {
        public InvalidValueTypeAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'JsonFormatNotSupported' error response from the Table Service API 
	///</summary>
	///<remarks>Description: JSON format is not supported.</remarks>
	public class JsonFormatNotSupportedAzureException : AzureException
    {
        public JsonFormatNotSupportedAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'MethodNotAllowed' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The requested method is not allowed on the specified resource.</remarks>
	public class MethodNotAllowedAzureException : AzureException
    {
        public MethodNotAllowedAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'NotImplemented' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The requested operation is not implemented on the specified resource.</remarks>
	public class NotImplementedAzureException : AzureException
    {
        public NotImplementedAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'PropertiesNeedValue' error response from the Table Service API 
	///</summary>
	///<remarks>Description: Values have not been specified for all properties in the entity.</remarks>
	public class PropertiesNeedValueAzureException : AzureException
    {
        public PropertiesNeedValueAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'PropertyNameInvalid' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The property name is invalid.</remarks>
	public class PropertyNameInvalidAzureException : AzureException
    {
        public PropertyNameInvalidAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'PropertyNameTooLong' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The property name exceeds the maximum allowed length.</remarks>
	public class PropertyNameTooLongAzureException : AzureException
    {
        public PropertyNameTooLongAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'PropertyValueTooLarge' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The property value is larger than the maximum size permitted.</remarks>
	public class PropertyValueTooLargeAzureException : AzureException
    {
        public PropertyValueTooLargeAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'TableAlreadyExists' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The table specified already exists.</remarks>
	public class TableAlreadyExistsAzureException : AzureException
    {
        public TableAlreadyExistsAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'TableBeingDeleted' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The specified table is being deleted.</remarks>
	public class TableBeingDeletedAzureException : AzureException
    {
        public TableBeingDeletedAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'TableNotFound' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The table specified does not exist.</remarks>
	public class TableNotFoundAzureException : AzureException
    {
        public TableNotFoundAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'TooManyProperties' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The entity contains more properties than allowed.</remarks>
	public class TooManyPropertiesAzureException : AzureException
    {
        public TooManyPropertiesAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'XMethodIncorrectCount' error response from the Table Service API 
	///</summary>
	///<remarks>Description: More than one X-HTTP-Method is specified.</remarks>
	public class XMethodIncorrectCountAzureException : AzureException
    {
        public XMethodIncorrectCountAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'XMethodIncorrectValue' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The specified X-HTTP-Method is invalid.</remarks>
	public class XMethodIncorrectValueAzureException : AzureException
    {
        public XMethodIncorrectValueAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'XMethodNotUsingPost' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The request uses X-HTTP-Method with an HTTP verb other than POST.</remarks>
	public class XMethodNotUsingPostAzureException : AzureException
    {
        public XMethodNotUsingPostAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

		///
	///<summary>
	///Represents a 'UpdateConditionNotSatisfied' error response from the Table Service API 
	///</summary>
	///<remarks>Description: The condition specified using HTTP conditional header(s) is not met.</remarks>
	public class UpdateConditionNotSatisfiedAzureException : AzureException
    {
        public UpdateConditionNotSatisfiedAzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

	
}