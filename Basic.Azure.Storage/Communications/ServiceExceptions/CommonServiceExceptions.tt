<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

// Matches list of errors published on MSDN: "Common REST API Error Codes"
// http://msdn.microsoft.com/en-us/library/windowsazure/dd179357.aspx
//
// To regenerate list below, copy from web page table and:
//		Replace: ([A-Za-z0-9]+)\s+[A-Za-z ]+\((\d+)\)\s+([A-Za-z0-9 \d\-\.\,\/\(\)\']+)[\r\n]+
//		With: { "$1", "$3" },\n
//	There is a duplicate entry for "ConditionNotMet", append "ForRead" and "ForWrite"
//	There is a duplicate entry for "InsufficientAccountPermissions", append "ForRead", "ForWrite", "ForExecute"
//	Duplicates for ServerBusy: append "Retry", "IngressLimit", "EgressLimit", "OperationsPerSecondLimit" on rest

var ErrorCodeList = new Dictionary<string,string>(){
	{ "AccountAlreadyExists", "The specified account already exists." },
	{ "AccountBeingCreated", "The specified account is in the process of being created." },
	{ "AccountIsDisabled", "The specified account is disabled." },
	{ "AuthenticationFailed", "Server failed to authenticate the request. Make sure the value of the Authorization header is formed correctly including the signature." },
	{ "ConditionHeadersNotSupported", "Condition headers are not supported." },
	{ "ConditionNotMetForRead", "The condition specified in the conditional header(s) was not met for a read operation." },
	{ "ConditionNotMetForWrite", "The condition specified in the conditional header(s) was not met for a write operation." },
	{ "EmptyMetadataKey", "The key for one of the metadata key-value pairs is empty." },
	{ "InsufficientAccountPermissionsForRead", "Read operations are currently disabled." },
	{ "InsufficientAccountPermissionsForWrite", "Write operations are not allowed." },
	{ "InsufficientAccountPermissionsForExecute", "The account being accessed does not have sufficient permissions to execute this operation." },
	{ "InternalError", "The server encountered an internal error. Please retry the request." },
	{ "InvalidAuthenticationInfo", "The authentication information was not provided in the correct format. Verify the value of Authorization header." },
	{ "InvalidHeaderValue", "The value provided for one of the HTTP headers was not in the correct format." },
	{ "InvalidHttpVerb", "The HTTP verb specified was not recognized by the server." },
	{ "InvalidInput", "One of the request inputs is not valid." },
	{ "InvalidMd5", "The MD5 value specified in the request is invalid. The MD5 value must be 128 bits and Base64-encoded." },
	{ "InvalidMetadata", "The specified metadata is invalid. It includes characters that are not permitted." },
	{ "InvalidQueryParameterValue", "An invalid value was specified for one of the query parameters in the request URI." },
	{ "InvalidRange", "The range specified is invalid for the current size of the resource." },
	{ "InvalidResourceName", "The specifed resource name contains invalid characters." },
	{ "InvalidUri", "The requested URI does not represent any resource on the server." },
	{ "InvalidXmlDocument", "The specified XML is not syntactically valid." },
	{ "InvalidXmlNodeValue", "The value provided for one of the XML nodes in the request body was not in the correct format." },
	{ "Md5Mismatch", "The MD5 value specified in the request did not match the MD5 value calculated by the server." },
	{ "MetadataTooLarge", "The size of the specified metadata exceeds the maximum size permitted." },
	{ "MissingContentLengthHeader", "The Content-Length header was not specified." },
	{ "MissingRequiredQueryParameter", "A required query parameter was not specified for this request." },
	{ "MissingRequiredHeader", "A required HTTP header was not specified." },
	{ "MissingRequiredXmlNode", "A required XML node was not specified in the request body." },
	{ "MultipleConditionHeadersNotSupported", "Multiple condition headers are not supported." },
	{ "OperationTimedOut", "The operation could not be completed within the permitted time." },
	{ "OutOfRangeInput", "One of the request inputs is out of range." },
	{ "OutOfRangeQueryParameterValue", "A query parameter specified in the request URI is outside the permissible range." },
	{ "RequestBodyTooLarge", "The size of the request body exceeds the maximum size permitted." },
	{ "ResourceTypeMismatch", "The specified resource type does not match the type of the existing resource." },
	{ "RequestUrlFailedToParse", "The url in the request could not be parsed." },
	{ "ResourceAlreadyExists", "The specified resource already exists." },
	{ "ResourceNotFound", "The specified resource does not exist." },
	{ "ServerBusyRetry", "The server is currently unable to receive requests. Please retry your request." },
	{ "ServerBusyIngressLimit", "Ingress is over the account limit." },
	{ "ServerBusyEgressLimit", "Egress is over the account limit." },
	{ "ServerBusyOperationsPerSecondLimit", "Operations per second is over the account limit." },
	{ "UnsupportedHeader", "One of the HTTP headers specified in the request is not supported." },
	{ "UnsupportedXmlNode", "One of the XML nodes specified in the request body is not supported." },
	{ "UnsupportedQueryParameter", "One of the query parameters specified in the request URI is not supported." },
	{ "UnsupportedHttpVerb", "The resource doesn't support the specified HTTP verb." }
};


#>
// -----------------------------------------------------------------------------
// Autogenerated code. Do not modify.
// -----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;

namespace Basic.Azure.Storage.Communications.ServiceExceptions
{

/// <summary>
/// Maps a WebException from Azure to the appropriate local exception type
/// </summary>
/// <remarks>
/// Uses the Common Service Error Codes defined here: http://msdn.microsoft.com/en-us/library/windowsazure/dd179357.aspx
/// </remarks>
public static class CommonServiceAzureExceptions
{

	public static AzureException GetExceptionFor(string requestId, HttpStatusCode statusCode, string errorCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
	{
		switch(errorCode)
		{
		<#
		foreach(var errorCode in ErrorCodeList)
		{
			#> 
			case "<#=errorCode.Key#>":
				return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
			<#
		}
		#>
		}

		var shortStatusDescription = statusDescription.Split('\n')[0];
		switch(shortStatusDescription)
		{
			<#
			foreach(var errorCode in ErrorCodeList)
			{
				#> 
				case "<#=errorCode.Value#>":
					return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
				<#
			}
			#>

			default:
				return new UnrecognizedAzureException(requestId, statusCode, statusDescription, details, baseException);
		}
	}

}

<#
foreach(var errorCode in ErrorCodeList)
{
	#>
	///
	///<summary>
	///Represents a '<#=errorCode.Key#>' error response from the Azure Storage Service API
	///</summary>
	public class <#=errorCode.Key#>AzureException : AzureException
    {
        public <#=errorCode.Key#>AzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

	<#
}
#>
}