<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

// Exceptions for each error document on MSDN "Blob Service Error Codes"
// http://msdn.microsoft.com/en-us/library/windowsazure/dd179439.aspx
//
// To regenerate list below, copy from web page table and:
//		Replace: ([A-Za-z]+)\s+[A-Za-z ]+\((\d+)\)\s+([A-Za-z \d\-\.\,\/\(\)']+)[\r\n]+
//		With: { "$1", "$3" },\n
//	Duplicates of: BlockCountExceedsLimit: append _50k_, _100k_
//	Duplicates of: FeatureVersionMismatch: append _AppendBlob_, _BlobType_
//  Correct Spelling of IncrementalCopyOfEralierVersionSnapshotNotAllowed
//	Comment out generic (duplicates generic error): UnsupportedHeader 

// we need both so we can try to failover to the second one on HEAD requests

var ErrorCodeList = new Dictionary<string,string>(){
	{ "AppendPositionConditionNotMet", "The append position condition specified was not met." },
	{ "BlobAlreadyExists", "The specified blob already exists." },
	{ "BlobNotFound", "The specified blob does not exist." },
	{ "BlobOverwritten", "The blob has been recreated since the previous snapshot was taken." },
	{ "BlobTierInadequateForContentLength", "The specified blob tier size limit cannot be less than content length." },
	{ "BlockCountExceedsLimit_50k_", "The committed block count cannot exceed the maximum limit of 50,000 blocks." },
	{ "BlockCountExceedsLimit_100k_", "The uncommitted block count cannot exceed the maximum limit of 100,000 blocks." },
	{ "BlockListTooLong", "The block list may not contain more than 50,000 blocks." },
	{ "CannotChangeToLowerTier", "A higher blob tier has already been explicitly set." },
	{ "CannotVerifyCopySource", "Could not verify the copy source within the specified time. Examine the HTTP status code and message for more information about the failure." },
	{ "ContainerAlreadyExists", "The specified container already exists." },
	{ "ContainerBeingDeleted", "The specified container is being deleted." },
	{ "ContainerDisabled", "The specified container has been disabled by the administrator." },
	{ "ContainerNotFound", "The specified container does not exist." },
	{ "ContentLengthLargerThanTierLimit", "The blob's content length cannot exceed its tier limit." },
	{ "CopyAcrossAccountsNotSupported", "The copy source account and destination account must be the same." },
	{ "CopyIdMismatch", "The specified copy ID did not match the copy ID for the pending copy operation." },
	{ "FeatureVersionMismatch_AppendBlob_", "The operation for AppendBlob requires at least version 2015-02-21." },
	{ "FeatureVersionMismatch_BlobType_", "The type of blob in the container is unrecognized by this version." },
	{ "IncrementalCopyBlobMismatch", "The specified source blob is different than the copy source of the existing incremental copy blob." },
	{ "IncrementalCopyOfEarlierVersionSnapshotNotAllowed", "The specified snapshot is earlier than the last snapshot copied into the incremental copy blob." },
	{ "IncrementalCopySourceMustBeSnapshot", "The source for incremental copy request must be a snapshot." },
	{ "InfiniteLeaseDurationRequired", "The lease ID matched, but the specified lease must be an infinite-duration lease." },
	{ "InvalidBlobOrBlock", "The specified blob or block content is invalid." },
	{ "InvalidBlobTier", "The specified blob tier is invalid." },
	{ "InvalidBlobType", "The blob type is invalid for this operation." },
	{ "InvalidBlockId", "The specified block ID is invalid. The block ID must be Base64-encoded." },
	{ "InvalidBlockList", "The specified block list is invalid." },
	{ "InvalidOperation", "Invalid operation against a blob snapshot." },
	{ "InvalidPageRange", "The page range specified is invalid." },
	{ "InvalidSourceBlobType", "The copy source blob type is invalid for this operation." },
	{ "InvalidSourceBlobUrl", "The source URL for incremental copy request must be valid Azure Storage blob URL." },
	{ "InvalidVersionForPageBlobOperation", "All operations on page blobs require at least version 2009-09-19." },
	{ "LeaseAlreadyPresent", "There is already a lease present." },
	{ "LeaseAlreadyBroken", "The lease has already been broken and cannot be broken again." },
	{ "LeaseIdMismatchWithBlobOperation", "The lease ID specified did not match the lease ID for the blob." },
	{ "LeaseIdMismatchWithContainerOperation", "The lease ID specified did not match the lease ID for the container." },
	{ "LeaseIdMismatchWithLeaseOperation", "The lease ID specified did not match the lease ID for the blob/container." },
	{ "LeaseIdMissing", "There is currently a lease on the blob/container and no lease ID was specified in the request." },
	{ "LeaseIsBreakingAndCannotBeAcquired", "The lease ID matched, but the lease is currently in breaking state and cannot be acquired until it is broken." },
	{ "LeaseIsBreakingAndCannotBeChanged", "The lease ID matched, but the lease is currently in breaking state and cannot be changed." },
	{ "LeaseIsBrokenAndCannotBeRenewed", "The lease ID matched, but the lease has been broken explicitly and cannot be renewed." },
	{ "LeaseLost", "A lease ID was specified, but the lease for the blob/container has expired." },
	{ "LeaseNotPresentWithBlobOperation", "There is currently no lease on the blob." },
	{ "LeaseNotPresentWithContainerOperation", "There is currently no lease on the container." },
	{ "LeaseNotPresentWithLeaseOperation", "There is currently no lease on the blob/container." },
	{ "MaxBlobSizeConditionNotMet", "The max blob size condition specified was not met." },
	{ "NoPendingCopyOperation", "There is currently no pending copy operation." },
	{ "OperationNotAllowedOnIncrementalCopyBlob", "The specified operation is not allowed on an incremental copy blob." },
	{ "PendingCopyOperation", "There is currently a pending copy operation." },
	{ "PreviousSnapshotCannotBeNewer", "The prevsnapshot query parameter value cannot be newer than snapshot query parameter value." },
	{ "PreviousSnapshotNotFound", "The previous snapshot is not found." },
	{ "PreviousSnapshotOperationNotSupported", "Differential Get Page Ranges is not supported on the previous snapshot." },
	{ "SequenceNumberConditionNotMet", "The sequence number condition specified was not met." },
	{ "SequenceNumberIncrementTooLarge", "The sequence number increment cannot be performed because it would result in overflow of the sequence number." },
	{ "SnapshotCountExceeded", "The snapshot count against this blob has been exceeded." },
	{ "SnaphotOperationRateExceeded", "The rate of snapshot operations against this blob has been exceeded." },
	{ "SnapshotsPresent", "This operation is not permitted while the blob has snapshots." },
	{ "SourceConditionNotMet", "The source condition specified using HTTP conditional header(s) is not met." },
	{ "SystemInUse", "This blob is in use by the system." },
	{ "TargetConditionNotMet", "The target condition specified using HTTP conditional header(s) is not met." },
	{ "UnauthorizedBlobOverwrite", "This request is not authorized to perform blob overwrites." },
	//{ "UnsupportedHeader", "One of the headers specified in the request is not supported." },
	{ "BlobBeingRehydrated", "This operation is not permitted because the blob is being rehydrated." },
	{ "BlobArchived", "This operation is not permitted on an archived blob." },
	{ "BlobNotArchived", "This blob is currently not in the archived state." }
};

#>
// -----------------------------------------------------------------------------
// Autogenerated code. Do not modify.
// -----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;

namespace Basic.Azure.Storage.Communications.ServiceExceptions
{

/// <summary>
/// Maps a WebException from Azure to the appropriate local exception type
/// </summary>
/// <remarks>
/// Uses the Blob Service Error Codes defined here: http://msdn.microsoft.com/en-us/library/windowsazure/dd179439.aspx
/// </remarks>
public static class BlobServiceAzureExceptions
{

	public static AzureException GetExceptionFor(string requestId, HttpStatusCode statusCode, string errorCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
	{
		switch(errorCode)
		{
		<#
		foreach(var errorCode in ErrorCodeList)
		{
			#> 
			case "<#=errorCode.Key#>":
				return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
			<#
		}
		#>
		}

		var shortStatusDescription = statusDescription.Split('\n')[0];
		switch(shortStatusDescription)
		{
			<#
			foreach(var errorCode in ErrorCodeList)
			{
				#> 
				case "<#=errorCode.Value#>":
					return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
				<#
			}
			#>

			default:
				return CommonServiceAzureExceptions.GetExceptionFor(requestId, statusCode, errorCode, statusDescription, details, baseException);
		}
	}

}

<#
foreach(var errorCode in ErrorCodeList)
{
	#>
	///
	///<summary>
	///Represents a '<#=errorCode.Key#>' error response from the Blob Service API 
	///</summary>
	///<remarks>Description: <#= errorCode.Value #></remarks>
	public class <#=errorCode.Key#>AzureException : AzureException
    {
        public <#=errorCode.Key#>AzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }

		/// <summary>
        /// This constructor is used only to wrap around other Azure Exceptionsd when Microsoft returns the wrong error code and we need to correct it for them
        /// </summary>
		public <#=errorCode.Key#>AzureException(AzureException actualAzureException)
			: base(actualAzureException)
		{ }
    }

	<#
}
#>

}