<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

// Exceptions for each error document on MSDN "Table Service Error Codes"
// http://msdn.microsoft.com/en-us/library/windowsazure/dd179438.aspx
//
// To regenerate list below, copy from web page table and:
//		Replace: ([A-Za-z]+)\s+[A-Za-z ]+\((\d+)\)\s+([A-Za-z \d\-\.\,\/\(\)\']+)[\r\n]+
//		With: { "$1", "$3" },\n
//	comment out UpdateConditionNotSatisfied, duplicates a Commmon error

var ErrorCodeList = new Dictionary<string,string>(){
	{ "DuplicatePropertiesSpecified", "A property is specified more than one time." },
	{ "EntityAlreadyExists", "The specified entity already exists." },
	{ "EntityTooLarge", "The entity is larger than the maximum size permitted." },
	{ "HostInformationNotPresent", "The required host information is not present in the request. You must send a non-empty Host header or include the absolute URI in the request line." },
	{ "InvalidValueType", "The value specified is invalid." },
	{ "JsonFormatNotSupported", "JSON format is not supported." },
	{ "MethodNotAllowed", "The requested method is not allowed on the specified resource." },
	{ "NotImplemented", "The requested operation is not implemented on the specified resource." },
	{ "PropertiesNeedValue", "Values have not been specified for all properties in the entity." },
	{ "PropertyNameInvalid", "The property name is invalid." },
	{ "PropertyNameTooLong", "The property name exceeds the maximum allowed length." },
	{ "PropertyValueTooLarge", "The property value is larger than the maximum size permitted." },
	{ "TableAlreadyExists", "The table specified already exists." },
	{ "TableBeingDeleted", "The specified table is being deleted." },
	{ "TableNotFound", "The table specified does not exist." },
	{ "TooManyProperties", "The entity contains more properties than allowed." },
	//{ "UpdateConditionNotSatisfied", "The update condition specified in the request was not satisfied." },
	{ "XMethodIncorrectCount", "More than one X-HTTP-Method is specified." },
	{ "XMethodIncorrectValue", "The specified X-HTTP-Method is invalid." },
	{ "XMethodNotUsingPost", "The request uses X-HTTP-Method with an HTTP verb other than POST." }
};

// undocumented? errors
ErrorCodeList.Add("UpdateConditionNotSatisfied","The condition specified using HTTP conditional header(s) is not met.");

#>
// -----------------------------------------------------------------------------
// Autogenerated code. Do not modify.
// -----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;

namespace Basic.Azure.Storage.Communications.ServiceExceptions
{

/// <summary>
/// Maps a WebException from Azure to the appropriate local exception type
/// </summary>
/// <remarks>
/// Uses the Table Service Error Codes defined here: http://msdn.microsoft.com/en-us/library/windowsazure/dd179438.aspx
/// </remarks>
public static class TableServiceAzureExceptions
{

	public static AzureException GetExceptionFor(string requestId, HttpStatusCode statusCode, string errorCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
	{
		switch(errorCode)
		{
		<#
		foreach(var errorCode in ErrorCodeList)
		{
			#> 
			case "<#=errorCode.Key#>":
				return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
			<#
		}
		#>
		}

		var shortStatusDescription = statusDescription.Split('\n')[0];
		switch(shortStatusDescription)
		{
			<#
			foreach(var errorCode in ErrorCodeList)
			{
				#> 
				case "<#=errorCode.Value#>":
					return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
				<#
			}
			#>

			default:
				return CommonServiceAzureExceptions.GetExceptionFor(requestId, statusCode, errorCode, statusDescription, details, baseException);
		}
	}

}

<#
foreach(var errorCode in ErrorCodeList)
{
	#>
	///
	///<summary>
	///Represents a '<#=errorCode.Key#>' error response from the Table Service API 
	///</summary>
	///<remarks>Description: <#= errorCode.Value #></remarks>
	public class <#=errorCode.Key#>AzureException : AzureException
    {
        public <#=errorCode.Key#>AzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

	<#
}
#>

}